{"version":3,"sources":["NewGuestName.js","AddGuestForm.js","Header.js","ConfirmedFilter.js","Counter.js","GuestName.js","Guest.js","GuestList.js","MainContent.js","App.js","serviceWorker.js","index.js"],"names":["NewGuestName","props","react_default","a","createElement","onChange","handleUpdatePendingGuest","type","placeholder","value","pendingGuest","AddGuestForm","onSubmit","addGuest","src_NewGuestName","e","updatePendingGuest","target","name","Header","src_AddGuestForm","ConfirmedFilter","toggleFilter","checked","isFiltered","Counter","_ref","totalConfirmed","totalUnconfirmed","totalGuests","className","GuestName","isEditing","handleNameEdit","Guest","guest","handleConfirmation","handleToggleEditing","handleRemoveGuest","setName","src_GuestName","isConfirmed","onClick","GuestList","guests","toggleConfirmation","toggleEditing","removeGuest","filter","map","src_Guest","key","id","text","MainContent","src_ConfirmedFilter","src_Counter","src_GuestList","App","state","lastGuestID","generateGuestID","_this","setState","prevState","getTotalGuests","length","getTotalConfirmedGuests","reduce","total","getTotalUnconfirmedGuests","toggleGuestProperty","property","guestID","Object","objectSpread","defineProperty","preventDefault","concat","toConsumableArray","this","src_Header","src_MainContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc583cfb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewGuestName = (props) => {\n    return(\n        <input\n        onChange={props.handleUpdatePendingGuest}\n        type=\"text\"\n        placeholder=\"Invite Someone\"\n        value={props.pendingGuest}/>\n    )\n};\n\nNewGuestName.propTypes ={\n    handleUpdatePendingGuest: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n};\n\nexport default NewGuestName;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NewGuestName from './NewGuestName';\n\nconst AddGuestForm = (props) => {\n    return(\n        <form onSubmit={props.addGuest}>\n            <NewGuestName\n            pendingGuest={props.pendingGuest}\n            handleUpdatePendingGuest={ e => props.updatePendingGuest(e.target.value) } />\n            <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n        </form>\n    )\n};\n\nAddGuestForm.propTypes ={\n    updatePendingGuest: PropTypes.func.isRequired,\n    addGuest: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n};\n\nexport default AddGuestForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AddGuestForm from './AddGuestForm';\n\nconst Header = (props) => {\n    return(\n        <header>\n            <h1>RSVP</h1>\n            <p>A React.js App</p>\n            <AddGuestForm\n             updatePendingGuest={props.updatePendingGuest}\n             addGuest={props.addGuest}\n             pendingGuest={props.pendingGuest}/>\n        </header>\n    )\n};\n\nHeader.propTypes ={\n    updatePendingGuest: PropTypes.func.isRequired,\n    addGuest: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ConfirmedFilter= (props) => {\n    return(\n        <div>\n            <h2>Invitees</h2>\n            <label>\n                <input type=\"checkbox\" onChange={props.toggleFilter} checked={props.isFiltered} /> \n                Hide those who haven't responded\n            </label>\n        </div>\n    );\n};\n\nConfirmedFilter.propTypes = {\n    toggleFilter: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired\n}\n\nexport default ConfirmedFilter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter= ({totalConfirmed, totalUnconfirmed, totalGuests}) => {\n    return(\n        <table className=\"counter\">\n            <tbody>\n                <tr>\n                    <td>Attending:</td>\n                    <td>{totalConfirmed}</td>\n                </tr>\n                <tr>\n                    <td>Unconfirmed:</td>\n                    <td>{totalUnconfirmed}</td>\n                </tr>\n                <tr>\n                    <td>Total:</td>\n                    <td>{totalGuests}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nCounter.propTypes = {\n    totalGuests: PropTypes.number.isRequired,\n    totalUnconfirmed: PropTypes.number.isRequired,\n    totalConfirmed: PropTypes.number.isRequired\n}\n\nexport default Counter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuestName = ({isEditing, name, handleNameEdit}) => {\n    if (isEditing) {\n        return (\n            <input\n                type=\"text\"\n                value={name}\n                onChange={handleNameEdit}\n            />\n        );\n    } else {\n        return (\n            <span>{name}</span>\n        );\n    }\n};\n\nGuestName.propTypes = {\n    isEditing: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    handleNameEdit: PropTypes.func.isRequired\n};\n\nexport default GuestName;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GuestName from './GuestName';\n\nconst Guest= ({guest, handleConfirmation, handleToggleEditing, handleRemoveGuest, setName}) => {\n    return(\n        <li className=\"responded\">\n            <GuestName\n            isEditing={guest.isEditing}\n            name={guest.name}\n            handleNameEdit={e => setName(e.target.value)} />\n            <label>\n                <input\n                type=\"checkbox\"\n                checked={guest.isConfirmed}\n                onChange={handleConfirmation} />\n                Confirmed\n            </label>\n            <button onClick={handleToggleEditing}>{guest.isEditing ? 'save' : 'edit'}</button>\n            <button onClick={handleRemoveGuest}>remove</button>\n        </li>\n    );\n};\n\nGuest.propTypes = {\n    guest: PropTypes.object.isRequired,\n    handleConfirmation: PropTypes.func.isRequired,\n    handleRemoveGuest: PropTypes.func.isRequired,\n    setName: PropTypes.func.isRequired\n}\n\nexport default Guest;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Guest from './Guest'\n\nconst GuestList = ({guests, toggleConfirmation, toggleEditing, removeGuest, setName, isFiltered, pendingGuest}) => {\n    return(\n        <ul>\n        <li className=\"pending\"><span>{pendingGuest}</span></li>\n\n        {guests\n            .filter( guest => guest.isConfirmed || isFiltered === false )\n            .map( (guest) => (\n            <Guest\n            key={guest.id}\n            guest={guest}\n            handleConfirmation={() => toggleConfirmation(guest.id)}\n            handleToggleEditing={() => toggleEditing(guest.id)}\n            handleRemoveGuest={() => removeGuest(guest.id)}\n            setName={text => setName(text, guest.id)} />\n        ))}\n\n    </ul>\n    );\n};\n\nGuestList.propTypes = {\n    guests: PropTypes.arrayOf(PropTypes.object).isRequired,\n    toggleConfirmation: PropTypes.func.isRequired,\n    toggleEditing: PropTypes.func.isRequired,\n    removeGuest: PropTypes.func.isRequired,\n    setName: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n}\n\nexport default GuestList;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ConfirmedFilter from './ConfirmedFilter';\nimport Counter from './Counter';\nimport GuestList from './GuestList';\n\nconst MainContent = (props) => {\n    return(\n        <div className=\"main\">\n\n            <ConfirmedFilter \n            toggleFilter={props.toggleFilter}\n            isFiltered={props.isFiltered}/>\n\n            <Counter\n            totalGuests={props.totalGuests}\n            totalConfirmed={props.totalConfirmed}\n            totalUnconfirmed={props.totalUnconfirmed} />\n\n            <GuestList\n            guests={props.guests}\n            toggleConfirmation={props.toggleConfirmation}\n            toggleEditing={props.toggleEditing}\n            removeGuest={props.removeGuest}\n            setName={props.setName}\n            isFiltered={props.isFiltered}\n            pendingGuest={props.pendingGuest} />\n\n        </div>\n    );\n};\n\nMainContent.propTypes = {\n    toggleFilter: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired,\n    totalGuests: PropTypes.number.isRequired,\n    totalConfirmed: PropTypes.number.isRequired,\n    totalUnconfirmed: PropTypes.number.isRequired,\n    guests: PropTypes.arrayOf(PropTypes.object).isRequired,\n    toggleConfirmation: PropTypes.func.isRequired,\n    toggleEditing: PropTypes.func.isRequired,\n    removeGuest: PropTypes.func.isRequired,\n    setName: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n}\n\nexport default MainContent;","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport MainContent from './MainContent'\n\nclass App extends Component {\n\n    state = {\n        isFiltered: false,\n        pendingGuest: '',\n        guests: [\n            {\n                name: 'Anabelle',\n                isConfirmed: false,\n                isEditing: false,\n                id: 1\n            },\n            {\n                name: 'Chucky',\n                isConfirmed: true,\n                isEditing: false,\n                id: 2\n            }\n        ]\n    };\n\n    lastGuestID = 2;\n\n    generateGuestID = () => {\n        this.lastGuestID += 1;\n        return this.lastGuestID;\n    }\n\n    toggleFilter = () => this.setState( prevState => ({\n        isFiltered: !prevState.isFiltered\n    }) );\n\n    getTotalGuests = () => this.state.guests.length;\n\n    getTotalConfirmedGuests = () => this.state.guests.reduce( (total, guest) => guest.isConfirmed ? total + 1 : total , 0);\n\n    getTotalUnconfirmedGuests = () => this.getTotalGuests() - this.getTotalConfirmedGuests();\n\n    toggleGuestProperty = (property, guestID) =>\n        this.setState( prevState => ({\n            guests: prevState.guests.map( (guest) => {\n                if (guest.id === guestID) {\n                    return {\n                        ...guest,\n                        [property]: !guest[property]\n                    }\n                }\n                return guest;\n            } )\n        }));\n\n    toggleConfirmation = (guestID) => this.toggleGuestProperty('isConfirmed', guestID);\n\n    toggleEditing = (guestID) => this.toggleGuestProperty('isEditing', guestID);\n\n    setName = (name, guestID) =>\n        this.setState( prevState => ({\n            guests: prevState.guests.map( (guest) => {\n                if (guest.id === guestID) {\n                    return {\n                        ...guest,\n                        name\n                    }\n                }\n                return guest;\n            } )\n        }));\n\n    updatePendingGuest = pendingGuest => {\n        this.setState(\n            {pendingGuest}\n        );\n    };\n\n    addGuest = (e) => {\n        e.preventDefault();\n        this.setState( prevState => {\n            return {\n                guests: [{\n                    name: prevState.pendingGuest,\n                    isConfirmed: false,\n                    isEditing: false,\n                    id: this.generateGuestID()\n                }, ...prevState.guests],\n                pendingGuest: ''\n            }\n        } );\n    };\n\n    removeGuest = guestID => {\n        this.setState( prevState => {\n            return {\n                guests: prevState.guests.filter( guest => guest.id !== guestID )\n            }\n        } );\n    };\n\n    render() {\n\n    const totalGuests = this.getTotalGuests();\n    const totalConfirmed = this.getTotalConfirmedGuests();\n    const totalUnconfirmed = this.getTotalUnconfirmedGuests();\n\n    return (\n        <div className=\"App\">\n\n            <Header \n            updatePendingGuest={this.updatePendingGuest}\n            addGuest={this.addGuest}\n            pendingGuest={this.state.pendingGuest}/>\n\n            <MainContent \n            toggleFilter={this.toggleFilter}\n            isFiltered={this.state.isFiltered}\n            totalGuests={totalGuests}\n            totalConfirmed={totalConfirmed}\n            totalUnconfirmed={totalUnconfirmed}\n            guests={this.state.guests}\n            toggleConfirmation={this.toggleConfirmation}\n            toggleEditing={this.toggleEditing}\n            removeGuest={this.removeGuest}\n            setName={this.setName}\n            pendingGuest={this.state.pendingGuest}/>\n\n        </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}